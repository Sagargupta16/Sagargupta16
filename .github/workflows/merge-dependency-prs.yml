name: Merge Dependency PRs

# This workflow can only be triggered manually
# REQUIRED: PERSONAL_ACCESS_TOKEN secret with scopes: repo, read:org
on:
  workflow_dispatch:
    inputs:
      merge_method:
        description: 'Merge method to use'
        required: true
        default: 'merge'
        type: choice
        options:
          - merge
          - squash
          - rebase
      close_unmergeable:
        description: 'Close PRs that cannot be merged'
        required: true
        default: true
        type: boolean
      dry_run:
        description: 'Dry run mode (show what would happen without making changes)'
        required: true
        default: false
        type: boolean
      target_repos:
        description: 'Comma-separated list of repos to process (leave empty for all)'
        required: false
        default: ''
        type: string

jobs:
  merge-dependency-prs:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          
      - name: Authenticate GitHub CLI
        shell: bash
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "‚ùå PERSONAL_ACCESS_TOKEN secret is not set"
            exit 1
          fi
          
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | gh auth login --with-token
          gh auth status
          
      - name: Run merge dependency PRs script
        shell: pwsh
        run: |
          $MergeMethod = "${{ github.event.inputs.merge_method }}"
          $CloseUnmergeable = [System.Convert]::ToBoolean("${{ github.event.inputs.close_unmergeable }}")
          $DryRun = [System.Convert]::ToBoolean("${{ github.event.inputs.dry_run }}")
          $TargetRepos = "${{ github.event.inputs.target_repos }}"
          
          Write-Host "=== Merge Dependency PRs ===" -ForegroundColor Magenta
          Write-Host "Merge method: $MergeMethod" -ForegroundColor Yellow
          Write-Host "Dry run: $DryRun" -ForegroundColor Yellow
          if ($TargetRepos) { Write-Host "Target repos: $TargetRepos" -ForegroundColor Yellow }
          
          if ($DryRun) {
            Write-Host "üîç DRY RUN MODE" -ForegroundColor Cyan
          }
          
          Set-Location "scripts"
          
          if ($DryRun) {
            $scriptContent = Get-Content "merge-dependency-prs.ps1" -Raw
            $dryRunScript = $scriptContent -replace 'gh pr merge.*--delete-branch', 'Write-Host "DRY RUN: Would merge PR #$PRNumber" -ForegroundColor Green; return "merged"'
            $dryRunScript = $dryRunScript -replace 'gh pr close.*--comment.*', 'Write-Host "DRY RUN: Would close PR #$PRNumber" -ForegroundColor Yellow'
            $dryRunScript = $dryRunScript -replace 'gh api --method DELETE.*', 'Write-Host "DRY RUN: Would delete branch $branchName" -ForegroundColor Yellow'
            
            if ($TargetRepos) {
              $targetRepoList = $TargetRepos -split ',' | ForEach-Object { $_.Trim() }
              $repoFilter = '$targetRepoList = @("' + ($targetRepoList -join '","') + '");'
              $repoFilter += '$sagarRepos = $sagarRepos | Where-Object { $targetRepoList -contains $_ };'
              $repoFilter += '$mcaRepos = $mcaRepos | Where-Object { $targetRepoList -contains $_ };'
              $dryRunScript = $dryRunScript -replace '(\$sagarRepos = @\([^)]+\))', "$1`n$repoFilter"
            }
            
            $dryRunScript | Out-File "merge-dependency-prs-dryrun.ps1" -Encoding UTF8
            & ".\merge-dependency-prs-dryrun.ps1" -MergeMethod $MergeMethod -CloseUnmergeable:$CloseUnmergeable
          } else {
            if ($TargetRepos) {
              $targetRepoList = $TargetRepos -split ',' | ForEach-Object { $_.Trim() }
              $scriptContent = Get-Content "merge-dependency-prs.ps1" -Raw
              $repoFilter = '$targetRepoList = @("' + ($targetRepoList -join '","') + '");'
              $repoFilter += '$sagarRepos = $sagarRepos | Where-Object { $targetRepoList -contains $_ };'
              $repoFilter += '$mcaRepos = $mcaRepos | Where-Object { $targetRepoList -contains $_ };'
              $modifiedScript = $scriptContent -replace '(\$sagarRepos = @\([^)]+\))', "$1`n$repoFilter"
              $modifiedScript | Out-File "merge-dependency-prs-filtered.ps1" -Encoding UTF8
              & ".\merge-dependency-prs-filtered.ps1" -MergeMethod $MergeMethod -CloseUnmergeable:$CloseUnmergeable
            } else {
              & ".\merge-dependency-prs.ps1" -MergeMethod $MergeMethod -CloseUnmergeable:$CloseUnmergeable
            }
          }
          
      - name: Upload run summary
        if: always()
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          @"
          ## üîÑ Merge Dependency PRs Summary
          
          **Triggered by:** ${{ github.actor }}  
          **Run time:** $timestamp  
          **Merge method:** ${{ github.event.inputs.merge_method }}  
          **Dry run:** ${{ github.event.inputs.dry_run }}  
          "@ | Out-File $env:GITHUB_STEP_SUMMARY -Encoding UTF8
