name: Merge Dependency PRs

# This workflow can only be triggered manually
# REQUIRED: PERSONAL_ACCESS_TOKEN secret with scopes: repo, read:org
on:
  workflow_dispatch:
    inputs:
      merge_method:
        description: 'Merge method to use'
        required: true
        default: 'merge'
        type: choice
        options:
          - merge
          - squash
          - rebase
      close_unmergeable:
        description: 'Close PRs that cannot be merged'
        required: true
        default: true
        type: boolean
      dry_run:
        description: 'Dry run mode (show what would happen without making changes)'
        required: true
        default: false
        type: boolean
      target_repos:
        description: 'Comma-separated list of repos to process (leave empty for all)'
        required: false
        default: ''
        type: string

jobs:
  merge-dependency-prs:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          
      - name: Authenticate GitHub CLI
        shell: bash
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "‚ùå PERSONAL_ACCESS_TOKEN secret is not set"
            exit 1
          fi
          
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | gh auth login --with-token
          gh auth status
          
      - name: Fetch all repositories
        shell: pwsh
        run: |
          Write-Host "üîç Fetching all repositories from Sagargupta16 and MCA-NITW..." -ForegroundColor Blue
          
          # Fetch Sagargupta16 repos
          $sagarRepos = @()
          $page = 1
          do {
            $response = gh api "users/Sagargupta16/repos?per_page=100&page=$page" | ConvertFrom-Json
            $sagarRepos += $response | Where-Object { -not $_.fork -and -not $_.archived } | ForEach-Object { $_.name }
            $page++
          } while ($response.Count -eq 100)
          
          # Fetch MCA-NITW repos  
          $mcaRepos = @()
          $page = 1
          do {
            $response = gh api "orgs/MCA-NITW/repos?per_page=100&page=$page" | ConvertFrom-Json
            $mcaRepos += $response | Where-Object { -not $_.fork -and -not $_.archived } | ForEach-Object { $_.name }
            $page++
          } while ($response.Count -eq 100)
          
          Write-Host "Found $($sagarRepos.Count) Sagargupta16 repos and $($mcaRepos.Count) MCA-NITW repos" -ForegroundColor Green
          
          # Save to environment for next step
          $allRepos = @{
            "Sagargupta16" = $sagarRepos
            "MCA-NITW" = $mcaRepos
          }
          $allRepos | ConvertTo-Json -Compress | Out-File "all-repos.json" -Encoding UTF8
          
      - name: Run merge dependency PRs script
        shell: pwsh
        run: |
          $MergeMethod = "${{ github.event.inputs.merge_method }}"
          $CloseUnmergeable = [System.Convert]::ToBoolean("${{ github.event.inputs.close_unmergeable }}")
          $DryRun = [System.Convert]::ToBoolean("${{ github.event.inputs.dry_run }}")
          $TargetRepos = "${{ github.event.inputs.target_repos }}"
          
          Write-Host "=== Merge Dependency PRs ===" -ForegroundColor Magenta
          Write-Host "Merge method: $MergeMethod" -ForegroundColor Yellow
          Write-Host "Dry run: $DryRun" -ForegroundColor Yellow
          if ($TargetRepos) { Write-Host "Target repos: $TargetRepos" -ForegroundColor Yellow }
          
          if ($DryRun) {
            Write-Host "üîç DRY RUN MODE" -ForegroundColor Cyan
          }
          
          # Load fetched repositories
          $allRepos = Get-Content "all-repos.json" | ConvertFrom-Json
          $sagarRepos = $allRepos.Sagargupta16
          $mcaRepos = $allRepos."MCA-NITW"
          
          Set-Location "scripts"
          
          if ($DryRun) {
            $scriptContent = Get-Content "merge-dependency-prs.ps1" -Raw
            
            # Replace hardcoded repo arrays with dynamic ones
            $scriptContent = $scriptContent -replace '\$sagarRepos = @\([^)]*\)', "`$sagarRepos = @('$($sagarRepos -join "','")')"
            $scriptContent = $scriptContent -replace '\$mcaRepos = @\([^)]*\)', "`$mcaRepos = @('$($mcaRepos -join "','")')"
            
            $dryRunScript = $scriptContent -replace 'gh pr merge.*--delete-branch', 'Write-Host "DRY RUN: Would merge PR #$PRNumber" -ForegroundColor Green; return "merged"'
            $dryRunScript = $dryRunScript -replace 'gh pr close.*--comment.*', 'Write-Host "DRY RUN: Would close PR #$PRNumber" -ForegroundColor Yellow'
            $dryRunScript = $dryRunScript -replace 'gh api --method DELETE.*', 'Write-Host "DRY RUN: Would delete branch $branchName" -ForegroundColor Yellow'
            
            if ($TargetRepos) {
              $targetRepoList = $TargetRepos -split ',' | ForEach-Object { 
                $repo = $_.Trim()
                if ($repo -like "*/*") {
                  $repo = $repo.Split('/')[-1]
                }
                return $repo
              }
              
              $repoFilterLines = @()
              $repoFilterLines += '$targetRepoList = @("' + ($targetRepoList -join '","') + '")'
              $repoFilterLines += '$sagarRepos = $sagarRepos | Where-Object { $targetRepoList -contains $_ }'
              $repoFilterLines += '$mcaRepos = $mcaRepos | Where-Object { $targetRepoList -contains $_ }'
              $repoFilter = $repoFilterLines -join "`n"
              
              $lines = $dryRunScript -split "`n"
              $newLines = @()
              foreach ($line in $lines) {
                $newLines += $line
                if ($line -match '^\s*\$sagarRepos = @\(.*\)') {
                  $newLines += $repoFilter
                }
              }
              $dryRunScript = $newLines -join "`n"
            }
            
            $dryRunScript | Out-File "merge-dependency-prs-dryrun.ps1" -Encoding UTF8
            & ".\merge-dependency-prs-dryrun.ps1" -MergeMethod $MergeMethod -CloseUnmergeable:$CloseUnmergeable
          } else {
            $scriptContent = Get-Content "merge-dependency-prs.ps1" -Raw
            
            # Replace hardcoded repo arrays with dynamic ones
            $scriptContent = $scriptContent -replace '\$sagarRepos = @\([^)]*\)', "`$sagarRepos = @('$($sagarRepos -join "','")')"
            $scriptContent = $scriptContent -replace '\$mcaRepos = @\([^)]*\)', "`$mcaRepos = @('$($mcaRepos -join "','")')"
            
            if ($TargetRepos) {
              $targetRepoList = $TargetRepos -split ',' | ForEach-Object { 
                $repo = $_.Trim()
                if ($repo -like "*/*") {
                  $repo = $repo.Split('/')[-1]
                }
                return $repo
              }
              
              $repoFilterLines = @()
              $repoFilterLines += '$targetRepoList = @("' + ($targetRepoList -join '","') + '")'
              $repoFilterLines += '$sagarRepos = $sagarRepos | Where-Object { $targetRepoList -contains $_ }'
              $repoFilterLines += '$mcaRepos = $mcaRepos | Where-Object { $targetRepoList -contains $_ }'
              $repoFilter = $repoFilterLines -join "`n"
              
              $lines = $scriptContent -split "`n"
              $newLines = @()
              foreach ($line in $lines) {
                $newLines += $line
                if ($line -match '^\s*\$sagarRepos = @\(.*\)') {
                  $newLines += $repoFilter
                }
              }
              $scriptContent = $newLines -join "`n"
            }
            
            $scriptContent | Out-File "merge-dependency-prs-dynamic.ps1" -Encoding UTF8
            & ".\merge-dependency-prs-dynamic.ps1" -MergeMethod $MergeMethod -CloseUnmergeable:$CloseUnmergeable
          }
          
      - name: Upload run summary
        if: always()
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          
          # Get repo counts if available
          $repoSummary = ""
          if (Test-Path "all-repos.json") {
            $allRepos = Get-Content "all-repos.json" | ConvertFrom-Json
            $sagarCount = $allRepos.Sagargupta16.Count
            $mcaCount = $allRepos."MCA-NITW".Count
            $repoSummary = "**Repositories processed:** $sagarCount Sagargupta16 repos + $mcaCount MCA-NITW repos = $($sagarCount + $mcaCount) total  `n"
          }
          
          @"
          ## üîÑ Merge Dependency PRs Summary
          
          **Triggered by:** ${{ github.actor }}  
          **Run time:** $timestamp  
          **Merge method:** ${{ github.event.inputs.merge_method }}  
          **Dry run:** ${{ github.event.inputs.dry_run }}  
          $repoSummary**Target repos filter:** ${{ github.event.inputs.target_repos || 'All repositories' }}
          
          ### üìä Repository Sources
          - **Sagargupta16**: All non-fork, non-archived repositories
          - **MCA-NITW**: All non-fork, non-archived repositories
          "@ | Out-File $env:GITHUB_STEP_SUMMARY -Encoding UTF8
